## Tic Tac Toe

import random
import time

from fractions import Fraction

from bitstring import BitArray


def setuptictactoe():
    Enemy = random.randint(1, 3)
    countdown = 3

    input1 = input("Rock, paper, or scissors?: ")

    while countdown > 0:
        print(countdown, "...")
        time.sleep(1)
        countdown = countdown - 1
        if countdown == 0:
            break

    if input1.lower() == 'rock':
        if Enemy == 1:
            print("You tied!")
        elif Enemy == 2:
            print("You lost!")
        elif Enemy == 3:
            print("You win!")
    elif input1.lower() == 'paper':
        if Enemy == 1:
            print("You win!")
        elif Enemy == 2:
            print("You tied")
        elif Enemy == 3:
            print("You lose!")
    elif input1.lower() == 'scissors':
        if Enemy == 1:
            print("You lose!")
        elif Enemy == 2:
            print("You win")
        elif Enemy == 3:
            print("You tie!")
    else:
        print("Invalid input")
def converttocelcius():
    user_input = input("Would you like to convert Fahrenheit to Celsius or Celsius to Fahrenheit?: ")

    fraction1 = Fraction(5, 9)  # Represents the conversion factor

    if user_input[0].lower() == 'f':
        amount_fahrenheit = float(input("How many degrees Fahrenheit would you like to convert?: "))
        if amount_fahrenheit == 0:
            result = -17.777778
        else:
            result = fraction1 * (amount_fahrenheit - 32)

        print(f"{amount_fahrenheit} degrees Fahrenheit is approximately {result} degrees Celsius.")
    elif user_input[0].lower() == 'c':
        amount_celsius = float(input("How many degrees Celsius would you like to convert?: "))
        result = (amount_celsius * 9 / 5) + 32
        print(f"{amount_celsius} degrees Celsius is approximately {result} degrees Fahrenheit.")
    else:
        print("Invalid input. Please enter 'F' or 'C' for the conversion.")
def numbergen():
    import random

    number = random.randint(1, 100)

    while True:
        try:
            user_input = int(input("Guess a number: "))

            if user_input == number:
                print("You win!")
                break
            elif user_input < number:
                print("The number is higher. Try again.")
            else:
                print("The number is lower. Try again.")
        except ValueError:
            print("Please enter a valid number.")
def palindrone():
    def is_palindrome(input_string):
        return input_string == input_string[::-1]

    # Get user input
    user_input = input("Enter a string to check if it's a palindrome: ")

    # Check if the input is a palindrome
    result = is_palindrome(user_input)

    # Display the result
    print(result)
def quotegen():
    num_quotes = int(input("How many quotes do you want: "))

    Start1 = ["Your day will be ", "Today is ", "Something will happen today, maybe it'll be ", "Today you will be "]
    Start2 = ["Greedy", "Lustful", "Good", "Good", "Sinful", "idk", "death"]
    Start3 = ["?", "!", "...", "?!", " :)"]

    # Loading the quote
    print("Your quotes today are.....")
    time.sleep(1.1)

    # Generate and print the quotes
    for i in range(num_quotes):
        randomitem1 = random.choice(Start1)
        randomitem2 = random.choice(Start2)
        randomquote = random.choice(Start3)
        result = randomitem1 + randomitem2 + randomquote
        print(result)
def converttobinary():
    from bitstring import BitArray
    # Function to convert number to Binary
    def Binary(num):
        if num >= 1:
            Binary(num // 2)
        print(num % 2, end='')

    dec_val = input("What number would you like to convert to binary?: ")
    Binary(dec_val)


def loadlistofgamewithinput():
    pass

gameinput = input("What app/game would you like to play/use? (Type info for list): ")
if gameinput.lower == 'info':
    print("Here are the games you can play!")
    print("TicTacToe")
    print("Number Gen")
    print("Palendrone checker")
    print("Quote gen")
    print("Convert # to binary")
